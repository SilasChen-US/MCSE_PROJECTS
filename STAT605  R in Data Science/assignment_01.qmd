---
title: 'Assignment 1'
format:
  pdf: default
pdf-engine: pdflatex  # You may need to remove this line
---

* Please produce your assignment as a pdf (knit to pdf).
See instructions in announcements if you have not downloaded a LaTeX distributor.
If you are still having issues, you may knit to HTML and use your browser to produce a pdf file, as it is detailed in the M 01 09 video of module 1.

* Please also submit your
qmd file (it will not be graded but we want it for reference6
purposes).
* Please use the provided qmd file as a basis for your first assignment
(do not submit an R script file), putting your solutions
inside the empty blocks that follow "Solution:"
* You will have to produce your future qmd files.
* 20 points per exercise

<br />

Keep the following code for reproducibility when using randomly generated numbers.
```{r}
set.seed(1)
```

#### Exercise 1:
Devise an approximate value of $\pi$ by generating $1000$ x-values on the uniform interval from $0$ to $1$ and $1000$ y-values on the uniform interval from $0$ to $1$. Use ?runif for help in using the runif() function.

Hint: For a circle of radius $1$, $\pi$ is equal to the area.

Solution:
```{r}
points <- 1000
x_val <- runif(points, 0, 1)
y_val <- runif(points, 0, 1)

in_cycle <- sum((x_val^2 + y_val^2) <=1)

approx_pi <- 4* in_cycle/points
approx_pi
```

<br />

#### Exercise 2:
Systematic sample. Given the data:
```{r}
data <- c(23, 89,  1, 34,
          26, 85, 24, 43,
          23, 93, 29, 45,
          32, 42, 43, NA,
          21, 54, 37, 76)
```

get a systematic sample of size `n = 5` from `data`
by extracting each value that lies every `K = N/n` elements
(where `N` is the total number of elements in `data`).

Your first element needs to be randomly determined
as a number between 1 and K.

Note: Your result needs to be a vector containing
the 5 elements that are part of your systematic sample. 
Also, the subsetting from the vector data must be a one liner (you need
to extract all elements together).

Solution:
```{r}
set.seed(1)
data <- c(23, 89,  1, 34,
          26, 85, 24, 43,
          23, 93, 29, 45,
          32, 42, 43, NA,
          21, 54, 37, 76)
N <- length(data)
n <- 5
K <- ceiling(N/n)
xing_sample <- data[sample(1:K, 1)+seq(0, by=K, length.out=n)]
xing_sample
```

<br />

#### Exercise 3:
Run the following code to load the 'babyboom' dataset from the UsingR package. This dataset contains the time of birth, sex, and birth weight for 44 babies born in one 24-hour window at a hospital in Australia.
```{r, message=FALSE, warning=FALSE}
#install.packages("UsingR") # Only run this once; remove when knitting
library(UsingR)
data(babyboom)
```

What were the weights, in grams, of the lightest and heaviest babies recorded?

The "gender" column classifies each baby as a 'boy' or a 'girl'. How many of each gender are there? Plot a histogram of weights for girls and a separate histogram of weights for boys, both using Scott's rule for the number of bins. Which histogram looks more bell-shaped?

Solution:
```{r}
library(UsingR)
data(babyboom)
(lightest <- min(babyboom$wt))
(heaviest <- max(babyboom$wt))
(gender_counts <- table(babyboom$gender))
hist(babyboom$wt[babyboom$gender == "boy"], 
     main = "Histogram of Baby Weights for Boys",
     xlab = "Weight (grams)",
     breaks = "scott",
     col = "blue")

hist(babyboom$wt[babyboom$gender == "girl"], 
     main = "Histogram of Baby Weights for girls",
     xlab = "Weight (grams)",
     breaks = "scott",
     col = "red")

```

<br />


#### Exercise 4:

Consider the following string $a$.

```{r}
a <- c("group1", "group2", "group3")
```

Take a random sample of size $20$ from $a$. Convert this random sample to a factor. Sort this factor in decreasing order. Use plot() to construct a bar chart of the frequencies of each level of the factor.

Solution:
```{r}
set.seed(1)
a <- c("group1", "group2", "group3")
random_a <- sample(a, 20, replace = TRUE)

(random_a_factor <- factor(random_a))
sorted_factor <- factor(random_a_factor, 
                        levels = names(sort(table(random_a_factor), 
                                            decreasing = TRUE)))
bar_chart <- barplot(table(sorted_factor), main = "Frequency of Factor Levels",
                     xlab = "Factor Levels", ylab = "Frequency", col = "pink")

text(bar_chart, table(sorted_factor), labels = table(sorted_factor), pos = 1)

```

<br />

#### Exercise 5:
Load the 'snacks' dataset using the following code.
```{r}
library(UsingR)
data(snacks)
```
Using logical indexes, how many snacks have an NA value for sugar? How many have more protein than sugar (confirm that your answer is not "NA")? What is the average amount of sodium in snacks with over $500$ calories? What about in snacks with less than $300$ calories? How many snacks have either $40$ carbohydrates or fewer OR $350$ or more calories? Finally, write a line of code to see how many snacks satisfy ALL of the following criteria: less than $400$ calories, less than $20$ sugar, $12$ or more protein.

Solution:
```{r}
library(UsingR)
data(snacks)
snacks

snacks_q1 <- sum(is.na(snacks$sugar))
snacks_q1
snacks_q2 <- sum(snacks$protein > snacks$sugar, na.rm = TRUE)
snacks_q2
snacks_q3 <- mean(snacks$sodium[ snacks$calories > 500], na.rm = TRUE)
snacks_q3
snacks_q4 <- mean(snacks$sodium[ snacks$calories < 300], ra.rm = TRUE)
snacks_q4
snacks_q5 <- sum(snacks$carbohydrates <= 40 | snacks$calories>=350, na.rm = TRUE)
snacks_q5
snacks_q6 <- sum(snacks$calories<400 & snacks$sugar<20 & snacks$protein >=12, na.rm = TRUE)
snacks_q6
```